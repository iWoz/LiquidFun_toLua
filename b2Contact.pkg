/*
* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org
*
* This software is provided 'as-is', without any express or implied
* warranty.  In no event will the authors be held liable for any damages
* arising from the use of this software.
* Permission is granted to anyone to use this software for any purpose,
* including commercial applications, and to alter it and redistribute it
* freely, subject to the following restrictions:
* 1. The origin of this software must not be misrepresented; you must not
* claim that you wrote the original software. If you use this software
* in a product, an acknowledgment in the product documentation would be
* appreciated but is not required.
* 2. Altered source versions must be plainly marked as such, and must not be
* misrepresented as being the original software.
* 3. This notice may not be removed or altered from any source distribution.
*/


#include <Box2D/Common/b2Math.h>
#include <Box2D/Collision/b2Collision.h>
#include <Box2D/Collision/Shapes/b2Shape.h>
#include <Box2D/Dynamics/b2Fixture.h>

class b2Body;
class b2Contact;
class b2Fixture;
class b2World;
class b2BlockAllocator;
class b2StackAllocator;
class b2ContactListener;



struct b2ContactRegister
{
    b2ContactCreateFcn* createFcn;
    b2ContactDestroyFcn* destroyFcn;
    bool primary;
};

/// A contact edge is used to connect bodies and contacts together
/// in a contact graph where each body is a node and each contact
/// is an edge. A contact edge belongs to a doubly linked list
/// maintained in each attached body. Each contact has two contact
/// nodes, one for each attached body.
struct b2ContactEdge
{
    b2Body* other;            ///< provides quick access to the other body attached.
    b2Contact* contact;        ///< the contact
    b2ContactEdge* prev;    ///< the previous contact edge in the body's contact list
    b2ContactEdge* next;    ///< the next contact edge in the body's contact list
};

/// The class manages contact between two shapes. A contact exists for each overlapping
/// AABB in the broad-phase (except if filtered). Therefore a contact object may exist
/// that has no contact points.
class b2Contact
{
public:

    /// Get the contact manifold. Do not modify the manifold unless you understand the
    /// internals of Box2D.
    b2Manifold* GetManifold();
    const b2Manifold* GetManifold();

    /// Get the world manifold.
    void GetWorldManifold(b2WorldManifold* worldManifold);

    /// Is this contact touching?
    bool IsTouching();

    /// Enable/disable this contact. This can be used inside the pre-solve
    /// contact listener. The contact is only disabled for the current
    /// time step (or sub-step in continuous collisions).
    void SetEnabled(bool flag);

    /// Has this contact been disabled?
    bool IsEnabled();

    /// Get the next contact in the world's contact list.
    b2Contact* GetNext();
    const b2Contact* GetNext();

    /// Get fixture A in this contact.
    b2Fixture* GetFixtureA();
    const b2Fixture* GetFixtureA();

    /// Get the child primitive index for fixture A.
    int32 GetChildIndexA();

    /// Get fixture B in this contact.
    b2Fixture* GetFixtureB();
    const b2Fixture* GetFixtureB();

    /// Get the child primitive index for fixture B.
    int32 GetChildIndexB();

    /// Override the default friction mixture. You can call this in b2ContactListener::PreSolve.
    /// This value persists until set or reset.
    void SetFriction(float32 friction);

    /// Get the friction.
    float32 GetFriction();

    /// Reset the friction mixture to the default value.
    void ResetFriction();

    /// Override the default restitution mixture. You can call this in b2ContactListener::PreSolve.
    /// The value persists until you set or reset.
    void SetRestitution(float32 restitution);

    /// Get the restitution.
    float32 GetRestitution();

    /// Reset the restitution to the default value.
    void ResetRestitution();

    /// Evaluate this contact with your own manifold and transforms.
    virtual void Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB) = 0;


};

