/*
* Copyright (c) 2006-2011 Erin Catto http://www.box2d.org
*
* This software is provided 'as-is', without any express or implied
* warranty.  In no event will the authors be held liable for any damages
* arising from the use of this software.
* Permission is granted to anyone to use this software for any purpose,
* including commercial applications, and to alter it and redistribute it
* freely, subject to the following restrictions:
* 1. The origin of this software must not be misrepresented; you must not
* claim that you wrote the original software. If you use this software
* in a product, an acknowledgment in the product documentation would be
* appreciated but is not required.
* 2. Altered source versions must be plainly marked as such, and must not be
* misrepresented as being the original software.
* 3. This notice may not be removed or altered from any source distribution.
*/


#include <Box2D/Common/b2Math.h>
#include <Box2D/Collision/Shapes/b2Shape.h>
#include <memory>

class b2Fixture;
class b2Joint;
class b2Contact;
class b2Controller;
class b2World;
struct b2FixtureDef;
struct b2JointEdge;
struct b2ContactEdge;

/// The body type.
/// static: zero mass, zero velocity, may be manually moved
/// kinematic: zero mass, non-zero velocity set by user, moved by solver
/// dynamic: positive mass, non-zero velocity determined by forces, moved by solver
enum b2BodyType
{
    b2_staticBody = 0,
    b2_kinematicBody,
    b2_dynamicBody

    // TODO_ERIN
    //b2_bulletBody,
};

/// A body definition holds all the data needed to construct a rigid body.
/// You can safely re-use body definitions. Shapes are added to a body after construction.
struct b2BodyDef
{
    /// This constructor sets the body definition default values.
    b2BodyDef()
    {
        userData = NULL;
        position.Set(0.0f, 0.0f);
        angle = 0.0f;
        linearVelocity.Set(0.0f, 0.0f);
        angularVelocity = 0.0f;
        linearDamping = 0.0f;
        angularDamping = 0.0f;
        allowSleep = true;
        awake = true;
        fixedRotation = false;
        bullet = false;
        type = b2_staticBody;
        active = true;
        gravityScale = 1.0f;
    }

    /// The body type: static, kinematic, or dynamic.
    /// Note: if a dynamic body would have zero mass, the mass is set to one.
    b2BodyType type;

    /// The world position of the body. Avoid creating bodies at the origin
    /// since this can lead to many overlapping shapes.
    b2Vec2 position;

    /// The world angle of the body in radians.
    float32 angle;

    /// The linear velocity of the body's origin in world co-ordinates.
    b2Vec2 linearVelocity;

    /// The angular velocity of the body.
    float32 angularVelocity;

    /// Linear damping is use to reduce the linear velocity. The damping parameter
    /// can be larger than 1.0f but the damping effect becomes sensitive to the
    /// time step when the damping parameter is large.
    float32 linearDamping;

    /// Angular damping is use to reduce the angular velocity. The damping parameter
    /// can be larger than 1.0f but the damping effect becomes sensitive to the
    /// time step when the damping parameter is large.
    float32 angularDamping;

    /// Set this flag to false if this body should never fall asleep. Note that
    /// this increases CPU usage.
    bool allowSleep;

    /// Is this body initially awake or sleeping?
    bool awake;

    /// Should this body be prevented from rotating? Useful for characters.
    bool fixedRotation;

    /// Is this a fast moving body that should be prevented from tunneling through
    /// other moving bodies? Note that all bodies are prevented from tunneling through
    /// kinematic and static bodies. This setting is only considered on dynamic bodies.
    /// @warning You should use this flag sparingly since it increases processing time.
    bool bullet;

    /// Does this body start out active?
    bool active;

    /// Use this to store application specific body data.
    void* userData;

    /// Scale the gravity applied to this body.
    float32 gravityScale;
};

/// A rigid body. These are created via b2World::CreateBody.
class b2Body
{
public:
    /// Creates a fixture and attach it to this body. Use this function if you need
    /// to set some fixture parameters, like friction. Otherwise you can create the
    /// fixture directly from a shape.
    /// If the density is non-zero, this function automatically updates the mass of the body.
    /// Contacts are not created until the next time step.
    /// @param def the fixture definition.
    /// @warning This function is locked during callbacks.
    b2Fixture* CreateFixture(const b2FixtureDef* def);

    /// Creates a fixture from a shape and attach it to this body.
    /// This is a convenience function. Use b2FixtureDef if you need to set parameters
    /// like friction, restitution, user data, or filtering.
    /// If the density is non-zero, this function automatically updates the mass of the body.
    /// @param shape the shape to be cloned.
    /// @param density the shape density (set to zero for static bodies).
    /// @warning This function is locked during callbacks.
    b2Fixture* CreateFixture(const b2Shape* shape, float32 density);

    /// Destroy a fixture. This removes the fixture from the broad-phase and
    /// destroys all contacts associated with this fixture. This will
    /// automatically adjust the mass of the body if the body is dynamic and the
    /// fixture has positive density.
    /// All fixtures attached to a body are implicitly destroyed when the body is destroyed.
    /// @param fixture the fixture to be removed.
    /// @warning This function is locked during callbacks.
    void DestroyFixture(b2Fixture* fixture);

    /// Set the position of the body's origin and rotation.
    /// This breaks any contacts and wakes the other bodies.
    /// Manipulating a body's transform may cause non-physical behavior.
    /// @param position the world position of the body's local origin.
    /// @param angle the world rotation in radians.
    void SetTransform(const b2Vec2& position, float32 angle);

    /// Get the body transform for the body's origin.
    /// @return the world transform of the body's origin.
    const b2Transform& GetTransform();

    /// Get the world body origin position.
    /// @return the world position of the body's origin.
    const b2Vec2& GetPosition();

    /// Get the angle in radians.
    /// @return the current world rotation angle in radians.
    float32 GetAngle();

    /// Get the world position of the center of mass.
    const b2Vec2& GetWorldCenter();

    /// Get the local position of the center of mass.
    const b2Vec2& GetLocalCenter();

    /// Set the linear velocity of the center of mass.
    /// @param v the new linear velocity of the center of mass.
    void SetLinearVelocity(const b2Vec2& v);

    /// Get the linear velocity of the center of mass.
    /// @return the linear velocity of the center of mass.
    b2Vec2 GetLinearVelocity();

    /// Set the angular velocity.
    /// @param omega the new angular velocity in radians/second.
    void SetAngularVelocity(float32 omega);

    /// Get the angular velocity.
    /// @return the angular velocity in radians/second.
    float32 GetAngularVelocity();

    /// Apply a force at a world point. If the force is not
    /// applied at the center of mass, it will generate a torque and
    /// affect the angular velocity. This wakes up the body.
    /// @param force the world force vector, usually in Newtons (N).
    /// @param point the world position of the point of application.
    void ApplyForce(const b2Vec2& force, const b2Vec2& point);

    /// Apply a force to the center of mass. This wakes up the body.
    /// @param force the world force vector, usually in Newtons (N).
    void ApplyForceToCenter(const b2Vec2& force);

    /// Apply a torque. This affects the angular velocity
    /// without affecting the linear velocity of the center of mass.
    /// This wakes up the body.
    /// @param torque about the z-axis (out of the screen), usually in N-m.
    void ApplyTorque(float32 torque);

    /// Apply an impulse at a point. This immediately modifies the velocity.
    /// It also modifies the angular velocity if the point of application
    /// is not at the center of mass. This wakes up the body.
    /// @param impulse the world impulse vector, usually in N-seconds or kg-m/s.
    /// @param point the world position of the point of application.
    void ApplyLinearImpulse(const b2Vec2& impulse, const b2Vec2& point);

    /// Apply an angular impulse.
    /// @param impulse the angular impulse in units of kg*m*m/s
    void ApplyAngularImpulse(float32 impulse);

    /// Get the total mass of the body.
    /// @return the mass, usually in kilograms (kg).
    float32 GetMass();

    /// Get the rotational inertia of the body about the local origin.
    /// @return the rotational inertia, usually in kg-m^2.
    float32 GetInertia();

    /// Get the mass data of the body.
    /// @return a struct containing the mass, inertia and center of the body.
    void GetMassData(b2MassData* data);

    /// Set the mass properties to override the mass properties of the fixtures.
    /// Note that this changes the center of mass position.
    /// Note that creating or destroying fixtures can also alter the mass.
    /// This function has no effect if the body isn't dynamic.
    /// @param massData the mass properties.
    void SetMassData(const b2MassData* data);

    /// This resets the mass properties to the sum of the mass properties of the fixtures.
    /// This normally does not need to be called unless you called SetMassData to override
    /// the mass and you later want to reset the mass.
    void ResetMassData();

    /// Get the world coordinates of a point given the local coordinates.
    /// @param localPoint a point on the body measured relative the the body's origin.
    /// @return the same point expressed in world coordinates.
    b2Vec2 GetWorldPoint(const b2Vec2& localPoint);

    /// Get the world coordinates of a vector given the local coordinates.
    /// @param localVector a vector fixed in the body.
    /// @return the same vector expressed in world coordinates.
    b2Vec2 GetWorldVector(const b2Vec2& localVector);

    /// Gets a local point relative to the body's origin given a world point.
    /// @param a point in world coordinates.
    /// @return the corresponding local point relative to the body's origin.
    b2Vec2 GetLocalPoint(const b2Vec2& worldPoint);

    /// Gets a local vector given a world vector.
    /// @param a vector in world coordinates.
    /// @return the corresponding local vector.
    b2Vec2 GetLocalVector(const b2Vec2& worldVector);

    /// Get the world linear velocity of a world point attached to this body.
    /// @param a point in world coordinates.
    /// @return the world velocity of a point.
    b2Vec2 GetLinearVelocityFromWorldPoint(const b2Vec2& worldPoint);

    /// Get the world velocity of a local point.
    /// @param a point in local coordinates.
    /// @return the world velocity of a point.
    b2Vec2 GetLinearVelocityFromLocalPoint(const b2Vec2& localPoint);

    /// Get the linear damping of the body.
    float32 GetLinearDamping();

    /// Set the linear damping of the body.
    void SetLinearDamping(float32 linearDamping);

    /// Get the angular damping of the body.
    float32 GetAngularDamping();

    /// Set the angular damping of the body.
    void SetAngularDamping(float32 angularDamping);

    /// Get the gravity scale of the body.
    float32 GetGravityScale();

    /// Set the gravity scale of the body.
    void SetGravityScale(float32 scale);

    /// Set the type of this body. This may alter the mass and velocity.
    void SetType(b2BodyType type);

    /// Get the type of this body.
    b2BodyType GetType();

    /// Should this body be treated like a bullet for continuous collision detection?
    void SetBullet(bool flag);

    /// Is this body treated like a bullet for continuous collision detection?
    bool IsBullet();

    /// You can disable sleeping on this body. If you disable sleeping, the
    /// body will be woken.
    void SetSleepingAllowed(bool flag);

    /// Is this body allowed to sleep
    bool IsSleepingAllowed();

    /// Set the sleep state of the body. A sleeping body has very
    /// low CPU cost.
    /// @param flag set to true to put body to sleep, false to wake it.
    void SetAwake(bool flag);

    /// Get the sleeping state of this body.
    /// @return true if the body is sleeping.
    bool IsAwake();

    /// Set the active state of the body. An inactive body is not
    /// simulated and cannot be collided with or woken up.
    /// If you pass a flag of true, all fixtures will be added to the
    /// broad-phase.
    /// If you pass a flag of false, all fixtures will be removed from
    /// the broad-phase and all contacts will be destroyed.
    /// Fixtures and joints are otherwise unaffected. You may continue
    /// to create/destroy fixtures and joints on inactive bodies.
    /// Fixtures on an inactive body are implicitly inactive and will
    /// not participate in collisions, ray-casts, or queries.
    /// Joints connected to an inactive body are implicitly inactive.
    /// An inactive body is still owned by a b2World object and remains
    /// in the body list.
    void SetActive(bool flag);

    /// Get the active state of the body.
    bool IsActive();

    /// Set this body to have fixed rotation. This causes the mass
    /// to be reset.
    void SetFixedRotation(bool flag);

    /// Does this body have fixed rotation?
    bool IsFixedRotation();

    /// Get the list of all fixtures attached to this body.
    b2Fixture* GetFixtureList();
    const b2Fixture* GetFixtureList();

    /// Get the list of all joints attached to this body.
    b2JointEdge* GetJointList();
    const b2JointEdge* GetJointList();

    /// Get the list of all contacts attached to this body.
    /// @warning this list changes during the time step and you may
    /// miss some collisions if you don't use b2ContactListener.
    b2ContactEdge* GetContactList();
    const b2ContactEdge* GetContactList();

    /// Get the next body in the world's body list.
    b2Body* GetNext();
    const b2Body* GetNext();

    /// Get the user data pointer that was provided in the body definition.
    void* GetUserData();

    /// Set the user data. Use this to store your application specific data.
    void SetUserData(void* data);

    /// Get the parent world of this body.
    b2World* GetWorld();
    const b2World* GetWorld();

    /// Dump this body to a log file
    void Dump();

};
