/*
* Copyright (c) 2006-2011 Erin Catto http://www.box2d.org
*
* This software is provided 'as-is', without any express or implied
* warranty.  In no event will the authors be held liable for any damages
* arising from the use of this software.
* Permission is granted to anyone to use this software for any purpose,
* including commercial applications, and to alter it and redistribute it
* freely, subject to the following restrictions:
* 1. The origin of this software must not be misrepresented; you must not
* claim that you wrote the original software. If you use this software
* in a product, an acknowledgment in the product documentation would be
* appreciated but is not required.
* 2. Altered source versions must be plainly marked as such, and must not be
* misrepresented as being the original software.
* 3. This notice may not be removed or altered from any source distribution.
*/

#include <Box2D/Dynamics/Joints/b2Joint.h>

/// Revolute joint definition. This requires defining an
/// anchor point where the bodies are joined. The definition
/// uses local anchor points so that the initial configuration
/// can violate the constraint slightly. You also need to
/// specify the initial relative angle for joint limits. This
/// helps when saving and loading a game.
/// The local anchor points are measured from the body's origin
/// rather than the center of mass because:
/// 1. you might not know where the center of mass will be.
/// 2. if you add/remove shapes from a body and recompute the mass,
///    the joints will be broken.
struct b2RevoluteJointDef : public b2JointDef
{
    b2RevoluteJointDef();

    /// Initialize the bodies, anchors, and reference angle using a world
    /// anchor point.
    void Initialize(b2Body* bodyA, b2Body* bodyB, const b2Vec2& anchor);

    /// The local anchor point relative to bodyA's origin.
    b2Vec2 localAnchorA;

    /// The local anchor point relative to bodyB's origin.
    b2Vec2 localAnchorB;

    /// The bodyB angle minus bodyA angle in the reference state (radians).
    float32 referenceAngle;

    /// A flag to enable joint limits.
    bool enableLimit;

    /// The lower angle for the joint limit (radians).
    float32 lowerAngle;

    /// The upper angle for the joint limit (radians).
    float32 upperAngle;

    /// A flag to enable the joint motor.
    bool enableMotor;

    /// The desired motor speed. Usually in radians per second.
    float32 motorSpeed;

    /// The maximum motor torque used to achieve the desired motor speed.
    /// Usually in N-m.
    float32 maxMotorTorque;
};

/// A revolute joint constrains two bodies to share a common point while they
/// are free to rotate about the point. The relative rotation about the shared
/// point is the joint angle. You can limit the relative rotation with
/// a joint limit that specifies a lower and upper angle. You can use a motor
/// to drive the relative rotation about the shared point. A maximum motor torque
/// is provided so that infinite forces are not generated.
class b2RevoluteJoint : public b2Joint
{
public:
    b2Vec2 GetAnchorA();
    b2Vec2 GetAnchorB();

    /// The local anchor point relative to bodyA's origin.
    const b2Vec2& GetLocalAnchorA() const ;

    /// The local anchor point relative to bodyB's origin.
    const b2Vec2& GetLocalAnchorB() const ;

    /// Get the reference angle.
    float32 GetReferenceAngle() const ;

    /// Get the current joint angle in radians.
    float32 GetJointAngle();

    /// Get the current joint angle speed in radians per second.
    float32 GetJointSpeed();

    /// Is the joint limit enabled?
    bool IsLimitEnabled();

    /// Enable/disable the joint limit.
    void EnableLimit(bool flag);

    /// Get the lower joint limit in radians.
    float32 GetLowerLimit();

    /// Get the upper joint limit in radians.
    float32 GetUpperLimit();

    /// Set the joint limits in radians.
    void SetLimits(float32 lower, float32 upper);

    /// Is the joint motor enabled?
    bool IsMotorEnabled();

    /// Enable/disable the joint motor.
    void EnableMotor(bool flag);

    /// Set the motor speed in radians per second.
    void SetMotorSpeed(float32 speed);

    /// Get the motor speed in radians per second.
    float32 GetMotorSpeed();

    /// Set the maximum motor torque, usually in N-m.
    void SetMaxMotorTorque(float32 torque);
    float32 GetMaxMotorTorque() const ;

    /// Get the reaction force given the inverse time step.
    /// Unit is N.
    b2Vec2 GetReactionForce(float32 inv_dt);

    /// Get the reaction torque due to the joint limit given the inverse time step.
    /// Unit is N*m.
    float32 GetReactionTorque(float32 inv_dt);

    /// Get the current motor torque given the inverse time step.
    /// Unit is N*m.
    float32 GetMotorTorque(float32 inv_dt);

    /// Dump to b2Log.
    void Dump();

};

