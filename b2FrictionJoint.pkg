/*
* Copyright (c) 2006-2007 Erin Catto http://www.box2d.org
*
* This software is provided 'as-is', without any express or implied
* warranty.  In no event will the authors be held liable for any damages
* arising from the use of this software.
* Permission is granted to anyone to use this software for any purpose,
* including commercial applications, and to alter it and redistribute it
* freely, subject to the following restrictions:
* 1. The origin of this software must not be misrepresented; you must not
* claim that you wrote the original software. If you use this software
* in a product, an acknowledgment in the product documentation would be
* appreciated but is not required.
* 2. Altered source versions must be plainly marked as such, and must not be
* misrepresented as being the original software.
* 3. This notice may not be removed or altered from any source distribution.
*/


#include <Box2D/Dynamics/Joints/b2Joint.h>

/// Friction joint definition.
struct b2FrictionJointDef : public b2JointDef
{
    b2FrictionJointDef();

    /// Initialize the bodies, anchors, axis, and reference angle using the world
    /// anchor and world axis.
    void Initialize(b2Body* bodyA, b2Body* bodyB, const b2Vec2& anchor);

    /// The local anchor point relative to bodyA's origin.
    b2Vec2 localAnchorA;

    /// The local anchor point relative to bodyB's origin.
    b2Vec2 localAnchorB;

    /// The maximum friction force in N.
    float32 maxForce;

    /// The maximum friction torque in N-m.
    float32 maxTorque;
};

/// Friction joint. This is used for top-down friction.
/// It provides 2D translational friction and angular friction.
class b2FrictionJoint : public b2Joint
{
public:
    b2Vec2 GetAnchorA();
    b2Vec2 GetAnchorB();

    b2Vec2 GetReactionForce(float32 inv_dt);
    float32 GetReactionTorque(float32 inv_dt);

    /// The local anchor point relative to bodyA's origin.
    const b2Vec2& GetLocalAnchorA();

    /// The local anchor point relative to bodyB's origin.
    const b2Vec2& GetLocalAnchorB() const ;

    /// Set the maximum friction force in N.
    void SetMaxForce(float32 force);

    /// Get the maximum friction force in N.
    float32 GetMaxForce();

    /// Set the maximum friction torque in N*m.
    void SetMaxTorque(float32 torque);

    /// Get the maximum friction torque in N*m.
    float32 GetMaxTorque();

    /// Dump joint to dmLog
    void Dump();

};


